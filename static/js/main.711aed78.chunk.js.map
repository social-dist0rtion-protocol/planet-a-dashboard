{"version":3,"sources":["components/Leaderboard.tsx","api.ts","components/GlobalStats.tsx","components/Sustainability.tsx","App.tsx","effects.ts","serviceWorker.ts","index.tsx"],"names":["unknownPlayer","name","event","Leader","_ref","countries","player","balance","react_default","a","createElement","Row","noGutters","Col","xs","className","OverlayTrigger","key","placement","overlay","Tooltip","id","concat","get","countryId","Badge","pill","style","backgroundColor","color","shortName","toLowerCase","numeral","format","React","memo","props","trees","slice","map","t","Leaderboard_Leader","players","parseInt","emissions","e","countriesById","countryList","getLeaderboard","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee2","wrap","_context2","prev","next","abrupt","stats","stop","apply","this","arguments","ChartConf","defaults","global","elements","point","borderColor","line","legend","labels","fontColor","countryIds","Array","from","keys","_useState","useState","_useState2","slicedToArray","times","setTimes","_useState3","Map","_useState4","netCO2ByCountry","setNetCO2ByCountry","_useState5","_useState6","totalCO2","setTotalCO2","useEffect","netCO2History","allTimeEntries","entries","forEach","v","values","sortedTimeline","sort","newTimes","reduce","current","getTime","toString","newValues","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","value","set","err","return","newValuesForCountry","newValue","_slice","length","push","co2","_current$slice","Date","Fragment","es","data","datasets","_ref3","i","_ref4","series","label","fill","pointBorderWidth","backgroundColors","options","animation","duration","showLine","spanGaps","scales","xAxes","type","display","gridLines","ticks","source","beginAtZero","autoSkip","scaleLabel","time","unit","round","yAxes","stacked","suggestedMax","suggestedMin","annotation","drawTime","annotations","mode","scaleID","borderWidth","content","enabled","width","height","redraw","goeMillis","co2ByCountry","treesByCountry","c","barPercentage","fontSize","c1","c2","pattern","draw","App","setPlayers","setTrees","setEmissions","_useState7","_useState8","setNetCO2History","_useState9","_useState10","setCO2ByCountry","_useState11","_useState12","setTreesByCountry","_useState13","_useState14","setGoeMillis","lastPolled","useRef","pollLeaderbord","_ref5","_callee","response","_context","sent","setTime","valueOf","goeMillisCirculating","focusListener","document","visibilityState","POLL_INTERVAL_SECONDS","console","log","addEventListener","removeEventListener","callback","delay","savedCallback","setInterval","clearInterval","useInterval","Container","fluid","role","aria-label","sm","lg","xl","src_components_Leaderboard","src_components_GlobalStats","src_components_Sustainability","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.711aed78.chunk.js","sourcesContent":["import React from \"react\";\nimport { Badge, Col, Row, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport \"./Leaderboard.css\";\nimport { Player, Country } from \"../types\";\nimport numeral from \"numeral\";\n\ntype LeaderboardProps = {\n  countries: Map<string, Country>;\n  players: { [id: string]: Player };\n  trees: string[][];\n  emissions: string[][];\n};\n\nconst unknownPlayer = { name: \"Mr. Mysterious\", event: \"???\" };\n\nconst Leader = ({\n  countries,\n  player,\n  balance\n}: {\n  countries: LeaderboardProps[\"countries\"];\n  player: Player;\n  balance: number;\n}) => (\n  <Row noGutters>\n    <Col xs={10} className=\"player-name\">\n      <OverlayTrigger\n        key={player.name}\n        placement=\"right\"\n        overlay={\n          <Tooltip id={`tt-${player.name}`}>\n            {\n              (countries.get(player.countryId) || { name: \"unknown country\" })\n                .name\n            }\n          </Tooltip>\n        }\n      >\n        <Badge\n          pill\n          style={{\n            backgroundColor: (\n              countries.get(player.countryId) || { color: \"white\" }\n            ).color,\n            color: \"#eee\"\n          }}\n        >\n          {`${(countries.get(player.countryId) || { event: \"ext\" }).event}-${(\n            countries.get(player.countryId) || { shortName: \"xxx\" }\n          ).shortName.toLowerCase()}`}\n        </Badge>\n      </OverlayTrigger>\n      {` ${player.name || \"Mr. Anonymous\"}`}\n    </Col>\n    <Col>{numeral(balance).format(\"0a\")}</Col>\n  </Row>\n);\n\nconst Leaderboard = (props: LeaderboardProps) => (\n  <div className=\"leaderboard\">\n    <h4>Best planters - CO₂ locked</h4>\n    <Row className=\"tree-huggers\" noGutters>\n      <Col>\n        <Row className=\"headers\" noGutters>\n          <Col xs={10}>name</Col>\n          <Col>CO₂ (Mt)</Col>\n        </Row>\n        {props.trees.slice(0, 10).map(t => (\n          <Leader\n            key={t[0]}\n            countries={props.countries}\n            player={props.players[t[0]] || unknownPlayer}\n            balance={parseInt(t[1], 10)}\n          />\n        ))}\n      </Col>\n    </Row>\n    <h4>Biggest polluters - CO₂ emitted</h4>\n    <Row className=\"polluters\" noGutters>\n      <Col>\n        <Row className=\"headers\" noGutters>\n          <Col xs={10}>name</Col>\n          <Col>CO₂ (Mt)</Col>\n        </Row>\n        {props.emissions.slice(0, 10).map(e => (\n          <Leader\n            key={e[0]}\n            countries={props.countries}\n            player={props.players[e[0]] || unknownPlayer}\n            balance={parseInt(e[1], 10)}\n          />\n        ))}\n      </Col>\n    </Row>\n  </div>\n);\n\nexport default React.memo(Leaderboard);\n","import { LeaderboardResponse, Country } from \"./types\";\nimport countryList from \"./countries.json\";\nimport stats from \"./assets/stats.json\";\n\nconst env = process.env.NODE_ENV || \"development\";\n\nconst backend =\n  env === \"development\"\n    ? \"http://localhost:8080\"\n    : \"https://planet-a-backend.before.coffee\";\n\nlet lastUpdate: number;\n\nexport const countriesById: { [id: string]: Country } = countryList;\n\nconst defaultHeaders = {\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\"\n};\n\nconst get = (url: string) =>\n  fetch(`${backend}${url}`, {\n    method: \"GET\",\n    headers: defaultHeaders\n  });\n\nconst fetchJson = async (call: () => Promise<Response>) => {\n  const response = await call();\n  if (response.status === 200) {\n    const json = await response.json();\n    return json;\n  }\n  return undefined;\n};\n\nexport const getLeaderboard = async () => {\n  // showing the offline stats of our session from August 2019\n  return stats;\n  // const response: LeaderboardResponse | undefined = await fetchJson(() =>\n  //   get(`/stats${lastUpdate ? `?from=${lastUpdate}` : \"\"}`)\n  // );\n  // const response = stats;\n  // if (response) lastUpdate = response.lastUpdate;\n  // return response;\n};\n","import numeral from \"numeral\";\nimport React, { useState, useEffect } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Line, defaults } from \"react-chartjs-2\";\nimport { LeaderboardResponse, Country } from \"../types\";\nimport \"./GlobalStats.css\";\nimport \"chartjs-plugin-annotation\";\nimport { countriesById } from \"../api\";\nimport { backgroundColors } from \"../App\";\n\nexport const MIN_THRESHOLD = 3420000;\nexport const MAX_THRESHOLD = 4170000;\nconst MAX_Y = 4300000;\n\nconst ChartConf = (defaults as any).global;\n\nChartConf.elements.point.backgroundColor = \"rgba(255, 255, 255, 0.8)\";\nChartConf.elements.point.borderColor = \"rgba(255, 255, 255, 0.8)\";\nChartConf.elements.line.borderColor = \"rgba(255, 255, 255, 0.8)\";\nChartConf.legend.labels.fontColor = \"rgba(255, 255, 255, 0.8)\";\n\ntype GlobalStatsProps = {\n  countries: Map<string, Country>;\n  netCO2History: LeaderboardResponse[\"netCO2History\"];\n  goeMillis: number;\n};\n\ntype TimeSeriesByCountry = Map<string, number[]>;\n\nconst GlobalStats = (props: GlobalStatsProps) => {\n  const countryIds = Array.from(props.countries.keys());\n  const [times, setTimes] = useState<Date[]>([]);\n  const [netCO2ByCountry, setNetCO2ByCountry] = useState<TimeSeriesByCountry>(\n    new Map()\n  );\n  const [totalCO2, setTotalCO2] = useState(3000);\n\n  useEffect(() => {\n    const { netCO2History } = props;\n\n    // merge all time series into a single one\n    const allTimeEntries: { [instant: string]: { [id: string]: number } } = {};\n\n    Object.entries(netCO2History).forEach(([id, l]) => {\n      l.forEach(v => {\n        const values = allTimeEntries[v[1]] || {};\n        values[id] = parseInt(v[0], 10);\n        allTimeEntries[v[1]] = values;\n      });\n    });\n\n    const sortedTimeline = Object.keys(allTimeEntries).sort();\n\n    const newTimes = times.reduce(\n      (prev, current) => {\n        prev[(current.getTime() / 1000).toString()] = true;\n        return prev;\n      },\n      {} as { [date: string]: boolean }\n    );\n\n    const newValues = new Map();\n    for (let countryId of props.countries.keys()) {\n      newValues.set(countryId, netCO2ByCountry.get(countryId) || []);\n    }\n\n    // fill \"holes\" for each country\n    sortedTimeline.forEach(t => {\n      newTimes[t] = true;\n      countryIds.forEach(id => {\n        const newValuesForCountry = newValues.get(id) || [];\n        let newValue = allTimeEntries[t][id];\n        if (!newValue) {\n          const [latest] = (\n            (newValuesForCountry.length && newValuesForCountry) || [0]\n          ).slice(-1);\n          newValue = latest;\n        }\n        newValuesForCountry.push(newValue);\n      });\n    });\n\n    const co2 = Array.from(newValues.values()).reduce((prev, current) => {\n      const [latest] = current.slice(-1);\n      return prev + latest;\n    }, 3000);\n\n    setTimes(\n      Object.keys(newTimes)\n        .sort()\n        .map(t => new Date(parseInt(t, 10) * 1000))\n    );\n    setNetCO2ByCountry(newValues);\n    setTotalCO2(co2);\n  }, [props.netCO2History]);\n\n  return (\n    <>\n      <h4>Global emissions</h4>\n      <Row className=\"global-stats\" noGutters>\n        <Col>\n          <Row>\n            <Col>\n              <Line\n                data={{\n                  labels: times,\n                  datasets: Array.from(netCO2ByCountry.entries()).map(\n                    ([countryId, series], i) => ({\n                      label: countriesById[countryId].name,\n                      fill: i === 0 ? \"origin\" : undefined,\n                      data: series,\n                      pointBorderWidth: 0,\n                      backgroundColor: backgroundColors[countryId]\n                    })\n                  )\n                }}\n                options={{\n                  animation: { duration: 0 },\n                  showLine: true,\n                  spanGaps: true,\n                  elements: {\n                    line: { fill: \"-1\" }\n                  },\n                  scales: {\n                    xAxes: [\n                      {\n                        id: \"time-axis\",\n                        type: \"time\",\n                        display: true,\n                        gridLines: {\n                          display: false,\n                          color: \"rgba(255, 255, 255, 0.6)\"\n                        },\n                        ticks: {\n                          source: \"auto\",\n                          beginAtZero: false,\n                          autoSkip: true,\n                          fontColor: \"rgba(255, 255, 255, 0.8)\"\n                        },\n                        scaleLabel: \"rgba(255, 255, 255, 0.8)\",\n                        time: { unit: \"second\", round: \"second\" }\n                      }\n                    ],\n                    yAxes: [\n                      {\n                        id: \"value-axis\",\n                        type: \"linear\",\n                        scaleLabel: \"rgba(255, 255, 255, 0.8)\",\n                        stacked: true,\n                        gridLines: {\n                          color: \"rgba(255, 255, 255, 0.2)\"\n                        },\n                        ticks: {\n                          suggestedMax: MAX_Y,\n                          suggestedMin: 0,\n                          beginAtZero: true,\n                          fontColor: \"rgba(255, 255, 255, 0.8)\"\n                        }\n                      }\n                    ]\n                  },\n                  annotation: {\n                    drawTime: \"afterDraw\",\n                    annotations: [\n                      {\n                        type: \"line\",\n                        mode: \"horizontal\",\n                        scaleID: \"value-axis\",\n                        value: MIN_THRESHOLD,\n                        borderColor: \"rgba(253, 106, 2, 0.7)\",\n                        borderWidth: 2,\n                        label: {\n                          content: \"+1.5°C\",\n                          enabled: true,\n                          backgroundColor: \"rgba(253, 106, 2, 0.8)\"\n                        }\n                      },\n                      {\n                        type: \"line\",\n                        mode: \"horizontal\",\n                        scaleID: \"value-axis\",\n                        value: MAX_THRESHOLD,\n                        borderColor: \"red\",\n                        borderWidth: 1,\n                        label: {\n                          content: \"+2°C\",\n                          enabled: true,\n                          backgroundColor: \"rgba(255, 0, 0, 0.7)\"\n                        }\n                      }\n                    ]\n                  }\n                }}\n                width={300}\n                height={400}\n                redraw\n              />\n            </Col>\n          </Row>\n          <Row className=\"current\">\n            <Col>\n              Current CO₂ levels: <span className=\"bold\">{totalCO2 || 0}</span>{\" \"}\n              Mt\n            </Col>\n          </Row>\n          <Row className=\"goe\">\n            Göllars circulating:{\"  \"}\n            <span className=\"bold\">\n              ₲{numeral(props.goeMillis / 1000).format(\"0.00\")}\n            </span>\n          </Row>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default React.memo(GlobalStats);\n","import React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Bar } from \"react-chartjs-2\";\nimport \"./Sustainability.css\";\nimport { Country } from \"../types\";\nimport { backgroundColors } from \"../App\";\n\ntype SustainabilityProps = {\n  countries: Map<string, Country>;\n  co2ByCountry: { [countrId: string]: string };\n  treesByCountry: { [countryId: string]: string };\n};\n\nconst Sustainability = (props: SustainabilityProps) => {\n  const { countries, co2ByCountry, treesByCountry } = props;\n  const countryIds = Array.from(countries.keys());\n\n  const labels: string[] = [];\n  const co2: number[] = [];\n  const trees: number[] = [];\n\n  countries.forEach((c, id) => {\n    labels.push(c.shortName);\n    co2.push(parseInt(co2ByCountry[id] || \"0\", 10));\n    trees.push(parseInt(treesByCountry[id] || \"0\", 10));\n  });\n\n  return (\n    <>\n      <h4>CO₂ emitted</h4>\n      <Row className=\"sustainability\" noGutters>\n        <Col>\n          <Bar\n            data={{\n              labels,\n              datasets: [\n                {\n                  label: \"CO₂\",\n                  data: co2,\n                  backgroundColor: countryIds.map(c => backgroundColors[c])\n                }\n              ]\n            }}\n            options={{\n              animation: { duration: 0 },\n              legend: { display: false },\n              scales: {\n                xAxes: [\n                  {\n                    barPercentage: 0.5,\n                    scaleLabel: \"rgba(255, 255, 255, 0.8)\",\n                    gridLines: {\n                      color: \"rgba(255, 255, 255, 0.4)\"\n                    },\n                    ticks: {\n                      fontSize: 16,\n                      fontColor: \"rgba(255, 255, 255, 0.8)\"\n                    }\n                  }\n                ],\n                yAxes: [\n                  {\n                    scaleLabel: \"rgba(255, 255, 255, 0.8)\",\n                    gridLines: {\n                      color: \"rgba(255, 255, 255, 0.2)\"\n                    },\n                    ticks: {\n                      suggestedMin: 500000,\n                      fontColor: \"rgba(255, 255, 255, 0.8)\"\n                    }\n                  }\n                ]\n              }\n            }}\n            width={200}\n            height={120}\n            redraw\n          />\n        </Col>\n      </Row>\n      <h4>Trees planted</h4>\n      <Row className=\"trees\" noGutters>\n        <Col>\n          <Bar\n            data={{\n              labels,\n              datasets: [\n                {\n                  label: \"trees\",\n                  data: trees,\n                  backgroundColor: countryIds.map(c => backgroundColors[c])\n                }\n              ]\n            }}\n            options={{\n              animation: { duration: 0 },\n              legend: { display: false },\n              scales: {\n                xAxes: [\n                  {\n                    barPercentage: 0.5,\n                    scaleLabel: \"rgba(255, 255, 255, 0.8)\",\n                    gridLines: {\n                      color: \"rgba(255, 255, 255, 0.4)\"\n                    },\n                    ticks: {\n                      fontSize: 16,\n                      fontColor: \"rgba(255, 255, 255, 0.8)\"\n                    }\n                  }\n                ],\n                yAxes: [\n                  {\n                    scaleLabel: \"rgba(255, 255, 255, 0.8)\",\n                    gridLines: {\n                      color: \"rgba(255, 255, 255, 0.2)\"\n                    },\n                    ticks: {\n                      suggestedMin: 0,\n                      fontColor: \"rgba(255, 255, 255, 0.8)\"\n                    }\n                  }\n                ]\n              }\n            }}\n            width={200}\n            height={120}\n            redraw\n          />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default React.memo(Sustainability);\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport { draw } from \"patternomaly\";\nimport Leaderboard from \"./components/Leaderboard\";\nimport GlobalStats from \"./components/GlobalStats\";\nimport Sustainability from \"./components/Sustainability\";\nimport { useInterval } from \"./effects\";\nimport { getLeaderboard, countriesById } from \"./api\";\nimport { LeaderboardResponse } from \"./types\";\nimport \"./App.css\";\n\nconst POLL_INTERVAL_SECONDS = 15;\n\n// use a Map so that insertion order is used in traversals\nconst countries = new Map(\n  // group countries by event, sort by short name lexicographically\n  Object.entries(countriesById).sort(([_, c1], [__, c2]) =>\n    c1.event > c2.event\n      ? 1\n      : c1.event === c2.event\n      ? c1.shortName > c2.shortName\n        ? 1\n        : c1.shortName === c2.shortName\n        ? 0\n        : -1\n      : -1\n  )\n);\n\nexport const backgroundColors = Array.from(countries.values()).reduce(\n  (prev, current) => {\n    prev[current.id] = current.pattern\n      ? draw(current.pattern as \"dot\" | \"dash\", current.color)\n      : current.color;\n    return prev;\n  },\n  {} as { [countryId: string]: string | CanvasPattern }\n);\n\nconst App: React.FC = () => {\n  const [players, setPlayers] = useState<LeaderboardResponse[\"players\"]>({});\n  const [trees, setTrees] = useState<LeaderboardResponse[\"trees\"]>([]);\n  const [emissions, setEmissions] = useState<LeaderboardResponse[\"emissions\"]>(\n    []\n  );\n  const [netCO2History, setNetCO2History] = useState(\n    Object.keys(countries).reduce(\n      (prev, current) => {\n        prev[current] = [];\n        return prev;\n      },\n      {} as LeaderboardResponse[\"netCO2History\"]\n    )\n  );\n  const [co2ByCountry, setCO2ByCountry] = useState<\n    LeaderboardResponse[\"co2ByCountry\"]\n  >({});\n  const [treesByCountry, setTreesByCountry] = useState<\n    LeaderboardResponse[\"treesByCountry\"]\n  >({});\n  const [goeMillis, setGoeMillis] = useState(0);\n  const lastPolled = useRef(new Date(\"1984-02-24T15:54:00\"));\n\n  const pollLeaderbord = async () => {\n    const response = await getLeaderboard();\n    if (lastPolled.current) {\n      lastPolled.current.setTime(new Date().valueOf());\n    }\n    if (response) {\n      setPlayers(response.players);\n      setTrees(response.trees);\n      setEmissions(response.emissions);\n      setNetCO2History(response.netCO2History);\n      setCO2ByCountry(response.co2ByCountry);\n      setTreesByCountry(response.treesByCountry);\n      setGoeMillis(response.goeMillisCirculating);\n    }\n  };\n\n  // initialize the leaderboard by polling once right away\n  useEffect(() => {\n    pollLeaderbord();\n    const focusListener = () => {\n      if (document.visibilityState === \"visible\") {\n        if (\n          lastPolled.current &&\n          new Date().valueOf() - lastPolled.current.valueOf() >\n            POLL_INTERVAL_SECONDS * 1000\n        ) {\n          console.log(\n            `polling after getting back focus, lastUpdate was on ${lastPolled}`\n          );\n          pollLeaderbord();\n        }\n      }\n    };\n    document.addEventListener(\"visibilitychange\", focusListener);\n    // unregister focus listener on cleanup\n    return () =>\n      document.removeEventListener(\"visibilitychange\", focusListener);\n  }, []);\n\n  // start polling every POLL_INTERVAL_SECONDS... seconds\n  useInterval(pollLeaderbord, POLL_INTERVAL_SECONDS * 1000);\n\n  return (\n    <div className=\"app\">\n      <Container fluid>\n        <Row>\n          <Col>\n            <h1>\n              <span role=\"img\" aria-label=\"globe\">\n                🌍\n              </span>{\" \"}\n              Planet A{\" \"}\n              <span role=\"img\" aria-label=\"globe\">\n                🌳\n              </span>\n            </h1>\n          </Col>{\" \"}\n        </Row>\n        <Row>\n          <Col className=\"mainCol\" sm={12} lg={6} xl={4}>\n            <Leaderboard\n              countries={countries}\n              players={players}\n              trees={trees}\n              emissions={emissions}\n            />\n          </Col>\n          <Col className=\"mainCol\" sm={12} lg={6} xl={4}>\n            <GlobalStats\n              countries={countries}\n              netCO2History={netCO2History}\n              goeMillis={goeMillis}\n            />\n          </Col>\n          <Col className=\"mainCol\" sm={12} lg={6} xl={4}>\n            <Sustainability\n              countries={countries}\n              co2ByCountry={co2ByCountry}\n              treesByCountry={treesByCountry}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","import { useEffect, useRef } from \"react\";\n\ntype Callback = () => any;\n\n// from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport const useInterval = (callback: Callback, delay: number) => {\n  const savedCallback = useRef<Callback>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current!();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}