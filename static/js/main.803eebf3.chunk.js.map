{"version":3,"sources":["api.ts","components/Leaderboard.tsx","components/GlobalStats.tsx","components/Sustainability.tsx","App.tsx","effects.ts","serviceWorker.ts","index.tsx"],"names":["lastUpdate","countriesById","countryList","defaultHeaders","Accept","Content-Type","fetchJson","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","call","response","json","wrap","_context","prev","next","sent","status","abrupt","undefined","stop","_x","apply","this","arguments","getLeaderboard","_ref2","_callee2","_context2","url","concat","fetch","method","headers","unknownPlayer","name","event","Leader","player","balance","react_default","createElement","Row","noGutters","Col","xs","className","Badge","pill","style","backgroundColor","countryId","color","textColor","numeral","format","React","memo","props","trees","slice","map","t","Leaderboard_Leader","key","players","parseInt","emissions","e","ChartConf","defaults","global","elements","point","borderColor","line","legend","labels","fontColor","backgroundColors","values","reduce","current","id","pattern","draw","countryIds","keys","_useState","useState","_useState2","slicedToArray","times","setTimes","_useState3","_useState4","netCO2ByCountry","setNetCO2ByCountry","_useState5","_useState6","totalCO2","setTotalCO2","useEffect","netCO2History","allTimeEntries","entries","forEach","v","sortedTimeline","sort","newTimes","toConsumableArray","newValues","push","Date","newValuesForCountry","newValue","_slice","length","co2","_current$slice","Fragment","es","data","datasets","_ref3","_ref4","series","label","pointBorderWidth","options","animation","duration","showLine","spanGaps","scales","xAxes","type","display","gridLines","ticks","source","beginAtZero","autoSkip","scaleLabel","time","unit","round","yAxes","stacked","suggestedMax","suggestedMin","annotation","drawTime","annotations","mode","scaleID","value","borderWidth","content","enabled","width","height","redraw","countries","co2ByCountry","treesByCountry","c","shortName","barPercentage","fontSize","App","setPlayers","setTrees","setEmissions","_useState7","_useState8","setNetCO2History","_useState9","_useState10","setCO2ByCountry","_useState11","_useState12","setTreesByCountry","pollLeaderbord","callback","delay","savedCallback","useRef","setInterval","clearInterval","useInterval","POLL_INTERVAL_SECONDS","Container","fluid","role","aria-label","src_components_Leaderboard","src_components_GlobalStats","src_components_Sustainability","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.803eebf3.chunk.js","sourcesContent":["import { LeaderboardResponse, Country } from \"./types\";\nimport countryList from \"./countries.json\";\n\nconst env = process.env.NODE_ENV || \"development\";\n\nconst backend =\n  env === \"development\"\n    ? \"http://localhost:8080\"\n    : \"https://planet-a-backend.before.coffee\";\n\nlet lastUpdate: number;\n\nexport const countriesById: { [id: string]: Country } = countryList;\n\nconst defaultHeaders = {\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\"\n};\n\nconst get = (url: string) =>\n  fetch(`${backend}${url}`, {\n    method: \"GET\",\n    headers: defaultHeaders\n  });\n\nconst fetchJson = async (call: () => Promise<Response>) => {\n  const response = await call();\n  if (response.status === 200) {\n    const json = await response.json();\n    return json;\n  }\n  return undefined;\n};\n\nexport const getLeaderboard = async () => {\n  const response: LeaderboardResponse | undefined = await fetchJson(() =>\n    get(`/stats${lastUpdate ? `?from=${lastUpdate}` : \"\"}`)\n  );\n  if (response) lastUpdate = response.lastUpdate;\n  return response;\n};\n","import React from \"react\";\nimport { Badge, Col, Row } from \"react-bootstrap\";\nimport \"./Leaderboard.css\";\nimport { Player } from \"../types\";\nimport numeral from \"numeral\";\nimport { countriesById } from \"../api\";\n\ntype LeaderboardProps = {\n  players: { [id: string]: Player };\n  trees: Array<[string, string]>;\n  emissions: Array<[string, string]>;\n};\n\nconst unknownPlayer = { name: \"Mr. Mysterious\", event: \"???\" };\n\nconst Leader = ({ player, balance }: { player: Player; balance: number }) => (\n  <Row noGutters>\n    <Col xs={10} className=\"player-name\">\n      <Badge\n        pill\n        style={{\n          backgroundColor: (\n            countriesById[player.countryId] || { color: \"white\" }\n          ).color,\n          color: (countriesById[player.countryId] || { textColor: \"#333333\" })\n            .textColor\n        }}\n      >\n        {(countriesById[player.countryId] || { event: \"ext\" }).event}\n      </Badge>{\" \"}\n      {player.name || \"Mr. Anonymous\"}\n    </Col>\n    <Col>{numeral(balance).format(\"0a\")}</Col>\n  </Row>\n);\n\nconst Leaderboard = (props: LeaderboardProps) => (\n  <div className=\"leaderboard\">\n    <h4>Best planters - CO₂ locked</h4>\n    <Row className=\"tree-huggers\" noGutters>\n      <Col>\n        <Row className=\"headers\" noGutters>\n          <Col xs={10}>name</Col>\n          <Col>CO₂ (Mt)</Col>\n        </Row>\n        {props.trees.slice(0, 10).map(t => (\n          <Leader\n            key={t[0]}\n            player={props.players[t[0]] || unknownPlayer}\n            balance={parseInt(t[1], 10)}\n          />\n        ))}\n      </Col>\n    </Row>\n    <h4>Biggest polluters - CO₂ emitted</h4>\n    <Row className=\"polluters\" noGutters>\n      <Col>\n        <Row className=\"headers\" noGutters>\n          <Col xs={10}>name</Col>\n          <Col>CO₂ (Mt)</Col>\n        </Row>\n        {props.emissions.slice(0, 10).map(e => (\n          <Leader\n            key={e[0]}\n            player={props.players[e[0]] || unknownPlayer}\n            balance={parseInt(e[1], 10)}\n          />\n        ))}\n      </Col>\n    </Row>\n  </div>\n);\n\nexport default React.memo(Leaderboard);\n","import React, { useState, useEffect } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Line, defaults } from \"react-chartjs-2\";\nimport { LeaderboardResponse } from \"../types\";\nimport \"./GlobalStats.css\";\nimport \"chartjs-plugin-annotation\";\nimport { draw } from \"patternomaly\";\nimport { countriesById } from \"../api\";\n\nexport const MIN_THRESHOLD = 420000;\nexport const MAX_THRESHOLD = 1170000;\nconst MAX_Y = 1300000;\n\nconst ChartConf = (defaults as any).global;\n\nChartConf.elements.point.backgroundColor = \"rgba(255, 255, 255, 0.8)\";\nChartConf.elements.point.borderColor = \"rgba(255, 255, 255, 0.8)\";\nChartConf.elements.line.borderColor = \"rgba(255, 255, 255, 0.8)\";\nChartConf.elements.line.borderColor = \"rgba(255, 255, 255, 0.8)\";\nChartConf.legend.labels.fontColor = \"rgba(255, 255, 255, 0.8)\";\n\nconst backgroundColors = Object.values(countriesById).reduce(\n  (prev, current) => {\n    prev[current.id] = current.pattern\n      ? draw(current.pattern, current.color)\n      : current.color;\n    return prev;\n  },\n  {} as { [countryId: string]: string | CanvasPattern }\n);\n\ntype GlobalStatsProps = {\n  netCO2History: LeaderboardResponse[\"netCO2History\"];\n};\n\ntype TimeSeriesByCountry = { [id: string]: number[] };\n\nconst GlobalStats = (props: GlobalStatsProps) => {\n  const countryIds = Object.keys(countriesById);\n  const [times, setTimes] = useState<Date[]>([]);\n  const [netCO2ByCountry, setNetCO2ByCountry] = useState<TimeSeriesByCountry>(\n    {}\n  );\n  const [totalCO2, setTotalCO2] = useState(0);\n\n  useEffect(() => {\n    const { netCO2History } = props;\n\n    // merge all time series into a single one\n    const allTimeEntries: { [instant: string]: { [id: string]: number } } = {};\n\n    Object.entries(netCO2History).forEach(([id, l]) => {\n      l.forEach(v => {\n        const values = allTimeEntries[v[1]] || {};\n        values[id] = parseInt(v[0], 10);\n        allTimeEntries[v[1]] = values;\n      });\n    });\n\n    const sortedTimeline = Object.keys(allTimeEntries).sort();\n\n    const newTimes: Date[] = [...times];\n    const newValues = countryIds.reduce(\n      (prev, current) => {\n        prev[current] = netCO2ByCountry[current] || [];\n        return prev;\n      },\n      {} as TimeSeriesByCountry\n    );\n\n    // fill \"holes\" for each country\n    sortedTimeline.forEach(t => {\n      newTimes.push(new Date(parseInt(t, 10) * 1000));\n      countryIds.forEach(id => {\n        const newValuesForCountry = newValues[id];\n        let newValue = allTimeEntries[t][id];\n        if (!newValue) {\n          const [latest] = (\n            (newValuesForCountry.length && newValuesForCountry) || [0]\n          ).slice(-1);\n          newValue = latest;\n        }\n        newValuesForCountry.push(newValue);\n      });\n    });\n\n    const co2 = Object.values(newValues).reduce((prev, current) => {\n      const [latest] = current.slice(-1);\n      return prev + latest;\n    }, 0);\n\n    setTimes(newTimes);\n    setNetCO2ByCountry(newValues);\n    setTotalCO2(co2);\n  }, [props.netCO2History]);\n\n  return (\n    <>\n      <h4>Global emissions</h4>\n      <Row className=\"global-stats\" noGutters>\n        <Col>\n          <Row>\n            <Col>\n              <Line\n                data={{\n                  labels: times,\n                  datasets: Object.entries(netCO2ByCountry).map(\n                    ([countryId, series]) => ({\n                      label: countriesById[countryId].name,\n                      data: series,\n                      pointBorderWidth: 0,\n                      backgroundColor: backgroundColors[countryId]\n                    })\n                  )\n                }}\n                options={{\n                  animation: { duration: 0 },\n                  showLine: true,\n                  spanGaps: true,\n                  scales: {\n                    xAxes: [\n                      {\n                        id: \"time-axis\",\n                        type: \"time\",\n                        display: true,\n                        gridLines: {\n                          display: false,\n                          color: \"rgba(255, 255, 255, 0.6)\"\n                        },\n                        ticks: {\n                          source: \"auto\",\n                          beginAtZero: false,\n                          autoSkip: true,\n                          fontColor: \"rgba(255, 255, 255, 0.8)\"\n                        },\n                        scaleLabel: \"rgba(255, 255, 255, 0.8)\",\n                        time: { unit: \"second\", round: \"second\" }\n                      }\n                    ],\n                    yAxes: [\n                      {\n                        id: \"value-axis\",\n                        type: \"linear\",\n                        scaleLabel: \"rgba(255, 255, 255, 0.8)\",\n                        stacked: true,\n                        gridLines: {\n                          color: \"rgba(255, 255, 255, 0.2)\"\n                        },\n                        ticks: {\n                          suggestedMax: MAX_Y,\n                          suggestedMin: 0,\n                          beginAtZero: true,\n                          fontColor: \"rgba(255, 255, 255, 0.8)\"\n                        }\n                      }\n                    ]\n                  },\n                  annotation: {\n                    drawTime: \"afterDraw\",\n                    annotations: [\n                      {\n                        type: \"line\",\n                        mode: \"horizontal\",\n                        scaleID: \"value-axis\",\n                        value: MIN_THRESHOLD,\n                        borderColor: \"rgba(253, 106, 2, 0.3)\",\n                        borderWidth: 2,\n                        label: {\n                          content: \"+1.5°C\",\n                          enabled: true,\n                          backgroundColor: \"rgba(253, 106, 2, 0.7)\"\n                        }\n                      },\n                      {\n                        type: \"line\",\n                        mode: \"horizontal\",\n                        scaleID: \"value-axis\",\n                        value: MAX_THRESHOLD,\n                        borderColor: \"red\",\n                        borderWidth: 1,\n                        label: {\n                          content: \"+2°C\",\n                          enabled: true,\n                          backgroundColor: \"rgba(255, 0, 0, 0.7)\"\n                        }\n                      }\n                    ]\n                  }\n                }}\n                width={300}\n                height={400}\n                redraw\n              />\n            </Col>\n          </Row>\n          <Row className=\"current\">\n            <Col>\n              Current CO₂ levels: <span className=\"bold\">{totalCO2 || 0}</span>{\" \"}\n              Mt\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default React.memo(GlobalStats);\n","import React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Bar } from \"react-chartjs-2\";\nimport \"./Sustainability.css\";\nimport { Country } from \"../types\";\n\ntype SustainabilityProps = {\n  countries: { [countryId: string]: Country };\n  co2ByCountry: { [countrId: string]: string };\n  treesByCountry: { [countryId: string]: string };\n};\n\nconst Sustainability = (props: SustainabilityProps) => {\n  const { countries, co2ByCountry, treesByCountry } = props;\n\n  const labels: string[] = [];\n  const co2: number[] = [];\n  const trees: number[] = [];\n\n  Object.entries(countries).forEach(([id, c]) => {\n    labels.push(c.shortName);\n    co2.push(parseInt(co2ByCountry[id] || \"0\", 10));\n    trees.push(parseInt(treesByCountry[id] || \"0\", 10));\n  });\n\n  return (\n    <>\n      <h4>CO₂ emitted</h4>\n      <Row className=\"sustainability\" noGutters>\n        <Col>\n          <Bar\n            data={{\n              labels,\n              datasets: [\n                {\n                  label: \"CO₂\",\n                  data: co2,\n                  backgroundColor: \"rgba(200, 200, 200, 0.6)\"\n                }\n              ]\n            }}\n            options={{\n              animation: { duration: 0 },\n              scales: {\n                xAxes: [\n                  {\n                    barPercentage: 0.5,\n                    scaleLabel: \"rgba(255, 255, 255, 0.8)\",\n                    gridLines: {\n                      color: \"rgba(255, 255, 255, 0.4)\"\n                    },\n                    ticks: {\n                      fontSize: 16,\n                      fontColor: \"rgba(255, 255, 255, 0.8)\"\n                    }\n                  }\n                ],\n                yAxes: [\n                  {\n                    scaleLabel: \"rgba(255, 255, 255, 0.8)\",\n                    gridLines: {\n                      color: \"rgba(255, 255, 255, 0.2)\"\n                    },\n                    ticks: {\n                      suggestedMin: 0,\n                      fontColor: \"rgba(255, 255, 255, 0.8)\"\n                    }\n                  }\n                ]\n              }\n            }}\n            width={200}\n            height={120}\n            redraw\n          />\n        </Col>\n      </Row>\n      <h4>Trees planted</h4>\n      <Row className=\"trees\" noGutters>\n        <Col>\n          <Bar\n            data={{\n              labels,\n              datasets: [\n                {\n                  label: \"trees\",\n                  data: trees,\n                  backgroundColor: \"rgba(80, 200, 120, 0.6)\"\n                }\n              ]\n            }}\n            options={{\n              animation: { duration: 0 },\n              scales: {\n                xAxes: [\n                  {\n                    barPercentage: 0.5,\n                    scaleLabel: \"rgba(255, 255, 255, 0.8)\",\n                    gridLines: {\n                      color: \"rgba(255, 255, 255, 0.4)\"\n                    },\n                    ticks: {\n                      fontSize: 16,\n                      fontColor: \"rgba(255, 255, 255, 0.8)\"\n                    }\n                  }\n                ],\n                yAxes: [\n                  {\n                    scaleLabel: \"rgba(255, 255, 255, 0.8)\",\n                    gridLines: {\n                      color: \"rgba(255, 255, 255, 0.2)\"\n                    },\n                    ticks: {\n                      suggestedMin: 0,\n                      fontColor: \"rgba(255, 255, 255, 0.8)\"\n                    }\n                  }\n                ]\n              }\n            }}\n            width={200}\n            height={120}\n            redraw\n          />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default React.memo(Sustainability);\n","import React, { useState, useEffect } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport Leaderboard from \"./components/Leaderboard\";\nimport GlobalStats from \"./components/GlobalStats\";\nimport Sustainability from \"./components/Sustainability\";\nimport { useInterval } from \"./effects\";\nimport { getLeaderboard, countriesById } from \"./api\";\nimport { LeaderboardResponse } from \"./types\";\nimport \"./App.css\";\n\nconst POLL_INTERVAL_SECONDS = 10;\n\nconst App: React.FC = () => {\n  const [players, setPlayers] = useState<LeaderboardResponse[\"players\"]>({});\n  const [trees, setTrees] = useState<LeaderboardResponse[\"trees\"]>([]);\n  const [emissions, setEmissions] = useState<LeaderboardResponse[\"emissions\"]>(\n    []\n  );\n  const [netCO2History, setNetCO2History] = useState(\n    Object.keys(countriesById).reduce(\n      (prev, current) => {\n        prev[current] = [];\n        return prev;\n      },\n      {} as LeaderboardResponse[\"netCO2History\"]\n    )\n  );\n  const [co2ByCountry, setCO2ByCountry] = useState<\n    LeaderboardResponse[\"co2ByCountry\"]\n  >({});\n  const [treesByCountry, setTreesByCountry] = useState<\n    LeaderboardResponse[\"treesByCountry\"]\n  >({});\n\n  const pollLeaderbord = async () => {\n    const response = await getLeaderboard();\n    if (response) {\n      setPlayers(response.players);\n      setTrees(response.trees);\n      setEmissions(response.emissions);\n      setNetCO2History(response.netCO2History);\n      setCO2ByCountry(response.co2ByCountry);\n      setTreesByCountry(response.treesByCountry);\n    }\n  };\n\n  // initialize the leaderboard by polling once right away\n  useEffect(() => {\n    pollLeaderbord();\n  }, []);\n\n  // start polling every POLL_INTERVAL_SECONDS... seconds\n  useInterval(pollLeaderbord, POLL_INTERVAL_SECONDS * 1000);\n\n  return (\n    <Container className=\"app\" fluid>\n      <Row>\n        <Col>\n          <h1>\n            <span role=\"img\" aria-label=\"globe\">\n              🌍\n            </span>{\" \"}\n            Planet A{\" \"}\n            <span role=\"img\" aria-label=\"globe\">\n              🌳\n            </span>\n          </h1>\n        </Col>{\" \"}\n      </Row>\n      <Row>\n        <Col className=\"mainCol\">\n          <Leaderboard players={players} trees={trees} emissions={emissions} />\n        </Col>\n        <Col className=\"mainCol\">\n          <GlobalStats netCO2History={netCO2History} />\n        </Col>\n        <Col className=\"mainCol\">\n          <Sustainability\n            countries={countriesById}\n            co2ByCountry={co2ByCountry}\n            treesByCountry={treesByCountry}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","import { useEffect, useRef } from \"react\";\n\ntype Callback = () => any;\n\n// from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport const useInterval = (callback: Callback, delay: number) => {\n  const savedCallback = useRef<Callback>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current!();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}